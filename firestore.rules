rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // ----------------- Users & Workout History -----------------
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // üî• Workout History Subcollection
      match /workout_history/{documentId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }

      // üîÑ History subcollection for backwards compatibility
      match /history/{document=**} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }

      // üçé Nutrition data subcollection
      match /nutrition/{nutritionId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }

      // üìä Steps data subcollection
      match /steps/{stepId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }

      // üéØ Goals subcollection
      match /goals/{goalId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
    }

    // ----------------- Foods Database -----------------
    match /foods/{foodId} {
      allow read: if true; // Public read access for food database
      allow write: if request.auth != null; // Authenticated users can add foods
    }

    // ----------------- Exercises Database -----------------
    match /exercises/{exerciseId} {
      allow read: if true; // Public read access for exercise database
      allow write: if request.auth != null; // Authenticated users can add exercises
    }

    // ----------------- Private Chats -----------------
    match /chats/{chatId} {
      allow read, write: if request.auth != null;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }

    // ----------------- Admin Support Chats -----------------
    match /adminChats/{chatId} {
      allow read, write: if request.auth != null &&
        (isAdmin() || request.auth.uid in chatId.split('_'));

      match /messages/{messageId} {
        allow read, write: if request.auth != null &&
          (isAdmin() || request.auth.uid in chatId.split('_'));
      }
    }

    // ----------------- Community Posts -----------------
    match /posts/{postId} {
      // Read: only authenticated users
      allow read: if request.auth != null;

      // Create: only authenticated user can create their own post
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.content is string
        && request.resource.data.timestamp != null
        && (request.resource.data.likes is int || request.resource.data.likes == null)
        && (request.resource.data.comments is int || request.resource.data.comments == null);

      // Update: Owner can update, others can only like/unlike
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId
        ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
          && (request.resource.data.likes == resource.data.likes + 1 ||
              request.resource.data.likes == resource.data.likes - 1)
        )
        ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments'])
          && (request.resource.data.comments == resource.data.comments + 1 ||
              request.resource.data.comments == resource.data.comments - 1)
        )
      );

      // Delete: only owner or admin
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());

      // ----------------- Post Likes Subcollection -----------------
      match /likes/{userId} {
        allow read: if request.auth != null;

        allow create: if request.auth != null
          && userId == request.auth.uid
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.timestamp != null;

        allow delete: if request.auth != null
          && userId == request.auth.uid
          && resource.data.userId == request.auth.uid;

        allow update: if false; // No updates allowed
      }

      // ----------------- Post Comments Subcollection -----------------
      match /comments/{commentId} {
        allow read: if request.auth != null;

        allow create: if request.auth != null
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.timestamp != null
          && request.resource.data.content is string;

        allow update: if request.auth != null
          && resource.data.userId == request.auth.uid;

        allow delete: if request.auth != null
          && (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // ----------------- AI Chat Messages -----------------
    match /chat_messages/{messageId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    // ----------------- Progress Tracking -----------------
    match /progress/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());

      match /entries/{entryId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == userId || isAdmin());
      }
    }

    // ----------------- Custom Workouts -----------------
    match /custom_workouts/{workoutId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // ----------------- Notifications -----------------
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    // ----------------- Admin Collections -----------------
    match /_admin/{document} {
      allow read, write: if isAdmin();
    }

    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ----------------- Analytics & Stats -----------------
    match /analytics/{document} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /app_stats/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ----------------- Feedback & Reports -----------------
    match /feedback/{feedbackId} {
      allow read: if isAdmin();
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    // ----------------- Paid Services -----------------
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }

    match /payments/{paymentId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false; // No payment deletion
    }

    // ----------------- Emergency Access (Temporary) -----------------
    // This rule allows read/write access until December 31, 2025 for development
    // Remove this before production deployment
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 12, 31) && 
        request.auth != null;
    }
  }
}